// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `iceInterfaces.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.onek.server.inf;

/**
 * 消息推送-客户端 需要具体客户端实现
 **/
public interface PushMessageClientPrx extends Ice.ObjectPrx
{
    /**
     * 客户端接受服务端 消息
     **/
    public void receive(String message);

    /**
     * 客户端接受服务端 消息
     * @param __ctx The Context map to send with the invocation.
     **/
    public void receive(String message, java.util.Map<String, String> __ctx);

    /**
     * 客户端接受服务端 消息
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receive(String message);

    /**
     * 客户端接受服务端 消息
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receive(String message, java.util.Map<String, String> __ctx);

    /**
     * 客户端接受服务端 消息
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receive(String message, Ice.Callback __cb);

    /**
     * 客户端接受服务端 消息
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receive(String message, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * 客户端接受服务端 消息
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receive(String message, Callback_PushMessageClient_receive __cb);

    /**
     * 客户端接受服务端 消息
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receive(String message, java.util.Map<String, String> __ctx, Callback_PushMessageClient_receive __cb);

    /**
     * 客户端接受服务端 消息
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receive(String message, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 客户端接受服务端 消息
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receive(String message, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 客户端接受服务端 消息
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receive(String message, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * 客户端接受服务端 消息
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_receive(String message, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb);

    /**
     * 客户端接受服务端 消息
     * @param __result The asynchronous result object.
     **/
    public void end_receive(Ice.AsyncResult __result);
}
