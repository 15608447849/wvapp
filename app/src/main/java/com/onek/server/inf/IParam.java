// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `iceInterfaces.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.onek.server.inf;

/**
 * 方法参数
 **/
public class IParam implements java.lang.Cloneable, java.io.Serializable
{
    public String json;

    public String[] arrays;

    public byte[] bytes;

    public int pageIndex;

    public int pageNumber;

    public String extend;

    public String token;

    public IParam()
    {
        json = "";
        extend = "";
        token = "";
    }

    public IParam(String json, String[] arrays, byte[] bytes, int pageIndex, int pageNumber, String extend, String token)
    {
        this.json = json;
        this.arrays = arrays;
        this.bytes = bytes;
        this.pageIndex = pageIndex;
        this.pageNumber = pageNumber;
        this.extend = extend;
        this.token = token;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        IParam _r = null;
        if(rhs instanceof IParam)
        {
            _r = (IParam)rhs;
        }

        if(_r != null)
        {
            if(json != _r.json)
            {
                if(json == null || _r.json == null || !json.equals(_r.json))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(arrays, _r.arrays))
            {
                return false;
            }
            if(!java.util.Arrays.equals(bytes, _r.bytes))
            {
                return false;
            }
            if(pageIndex != _r.pageIndex)
            {
                return false;
            }
            if(pageNumber != _r.pageNumber)
            {
                return false;
            }
            if(extend != _r.extend)
            {
                if(extend == null || _r.extend == null || !extend.equals(_r.extend))
                {
                    return false;
                }
            }
            if(token != _r.token)
            {
                if(token == null || _r.token == null || !token.equals(_r.token))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::inf::IParam");
        __h = IceInternal.HashUtil.hashAdd(__h, json);
        __h = IceInternal.HashUtil.hashAdd(__h, arrays);
        __h = IceInternal.HashUtil.hashAdd(__h, bytes);
        __h = IceInternal.HashUtil.hashAdd(__h, pageIndex);
        __h = IceInternal.HashUtil.hashAdd(__h, pageNumber);
        __h = IceInternal.HashUtil.hashAdd(__h, extend);
        __h = IceInternal.HashUtil.hashAdd(__h, token);
        return __h;
    }

    public IParam
    clone()
    {
        IParam c = null;
        try
        {
            c = (IParam)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(json);
        stringArrayHelper.write(__os, arrays);
        byteArrayHelper.write(__os, bytes);
        __os.writeInt(pageIndex);
        __os.writeInt(pageNumber);
        __os.writeString(extend);
        __os.writeString(token);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        json = __is.readString();
        arrays = stringArrayHelper.read(__is);
        bytes = byteArrayHelper.read(__is);
        pageIndex = __is.readInt();
        pageNumber = __is.readInt();
        extend = __is.readString();
        token = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, IParam __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public IParam
    __read(IceInternal.BasicStream __is, IParam __v)
    {
        if(__v == null)
        {
             __v = new IParam();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final IParam __nullMarshalValue = new IParam();

    public static final long serialVersionUID = 1706528032L;
}
